Postgresql commands

sudo apt update
sudo apt install postgresql postgresql-contrib

sudo -i -u postgres

This way you are switched to postgres user. and enter your password (of the previous user)

psql

With psql you are ready to perform postgres commands.

always use

\q

CREATE DATABASE exampledatabase;

To see the existing databases, you can use the following SQL query:
\l

If you want more detailed information about a specific database, you can use the \c 

\c your_database

 create model of database 
php artisan make:model Product --migration
php artisan make:controller productController

god-did@god-did-82TS:/etc/php/8.2/cli$ sudo nano /etc/php.ini
god-did@god-did-82TS:/etc/php/8.2/cli$ sudo nano /php.ini
god-did@god-did-82TS:/etc/php/8.2/cli$ ls
conf.d  php.ini
god-did@god-did-82TS:/etc/php/8.2/cli$ code .
god-did@god-did-82TS:/etc/php/8.2/cli$ cd
god-did@god-did-82TS:~$ sudo nano /etc/php/8.2/cli/php.ini
god-did@god-did-82TS:~$ php -m | grep pdo_sqlite
PHP Warning:  PHP Startup: Unable to load dynamic library 'pdo_sqlite' (tried: /usr/lib/php/20220829/pdo_sqlite (/usr/lib/php/20220829/pdo_sqlite: cannot open shared object file: No such file or directory), /usr/lib/php/20220829/pdo_sqlite.so (/usr/lib/php/20220829/pdo_sqlite.so: undefined symbol: php_pdo_unregister_driver)) in Unknown on line 0
pdo_sqlite
god-did@god-did-82TS:~$ php -m | grep pdo_sqlite
pdo_sqlite
god-did@god-did-82TS:~$ 


useerauthontication

https://laravel.com/docs/10.x/sanctum

composer require laravel/sanctum

php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"

Next, if you plan to utilize Sanctum to authenticate a SPA, you should add Sanctum's middleware to your api middleware group within your application's app/Http/Kernel.php file:

'api' => [
    \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
    \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
    \Illuminate\Routing\Middleware\SubstituteBindings::class,
],
\



<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class AuthController extends Controller
{
    public function register(Request $request)
    {
        $fields = $request->validate([
            'name' => 'required|string',
            'email' => 'required|string|unique:users,email',
            'password' => 'required|confirmed'
        ]);

        $user = User::create([
            'name' => $fields['name'],
            'email' => $fields['email'],
            'password' => bcrypt($fields['password']),
        ]);

        // You can customize the response as needed
        return response(['message' => 'Registration successful'], 201);
    }

    public function logout(Request $request)
    {
        if ($request->user()) {
            Log::info('Before token deletion');
            $request->user()->tokens()->delete();
            Log::info('After token deletion');
        }

        return response()->json(['message' => 'Logout Successfully'], 200);
    }

    public function Login(Request $request)
    {
        $fields = $request->validate([

            'email' => 'required|string',
            'password' => 'required'
        ]);

        $user = User::create([

            'email' => $fields['email'],
            'password' => bcrypt($fields['password']),
        ]);

        // You can customize the response as needed
        return response(['message' => 'Login successful'], 201);
    }
}
